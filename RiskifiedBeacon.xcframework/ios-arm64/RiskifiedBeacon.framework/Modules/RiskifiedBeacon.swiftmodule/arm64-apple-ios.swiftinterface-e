// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RiskifiedBeacon
import CoreGraphics
import Foundation
@_exported import RiskifiedBeacon
import Swift
import UIKit
import WebKit
import _Concurrency
public struct Event : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc open class MfaLogger : ObjectiveC.NSObject {
  @objc public init(isDebug: Swift.Bool = false)
  @objc public func info(message: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class DecoSdk : ObjectiveC.NSObject {
  @objc public func offerDeco(config: RiskifiedBeacon.DecoConfig)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class DecoConfig : ObjectiveC.NSObject {
  public init(shopUrl: Swift.String, sessionId: Swift.String, decoSuccessHandler: @escaping () -> Swift.Void, loadCompleteHandler: @escaping () -> Swift.Void, parent: UIKit.UIViewController, env: RiskifiedBeacon.DecoEnv, decoInlineButtonParent: UIKit.UIView, decoInlineButtonUiFont: UIKit.UIFont = UIFont(name: "Helvetica", size: 20)!, isDebug: Swift.Bool = false)
  @objc deinit
}
@objc public enum DecoEnv : Swift.Int {
  case production
  case sandbox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct ButtonConfig : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc open class MfaSDK : ObjectiveC.NSObject {
  @objc public func offerMFA(config: RiskifiedBeacon.MfaConfig)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MfaConfig : ObjectiveC.NSObject {
  public init(token: Swift.String, verificationHandler: @escaping (Swift.String) -> Swift.Void, widgetClosedHandler: @escaping () -> Swift.Void, parent: UIKit.UIViewController, env: RiskifiedBeacon.Env, isDebug: Swift.Bool)
  @objc deinit
}
@objc public enum Env : Swift.Int {
  case production
  case sandbox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class DecoLogger : ObjectiveC.NSObject {
  @objc public init(isDebug: Swift.Bool = false)
  @objc public func info(message: Swift.String)
  @objc deinit
}
extension RiskifiedBeacon.DecoEnv : Swift.Equatable {}
extension RiskifiedBeacon.DecoEnv : Swift.Hashable {}
extension RiskifiedBeacon.DecoEnv : Swift.RawRepresentable {}
extension RiskifiedBeacon.Env : Swift.Equatable {}
extension RiskifiedBeacon.Env : Swift.Hashable {}
extension RiskifiedBeacon.Env : Swift.RawRepresentable {}
